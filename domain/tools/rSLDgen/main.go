/*
 * Tool to extract publicsuffix's list and generate ../../restricted_sld.go
 * Source: https://publicsuffix.org/
 */
package main

import (
	"bufio"
	"fmt"
	"net/http"
	"os"
	"strings"

	"github.com/elmasy-com/slices"
)

/*
 * Benchmark test:
 * - if tld == "a" || tld == "b"	-> ~4300 ns/op
 * - string slice with for loop 	-> ~3850 ns/op
 * - switch case 					-> com		-> ~2.6 ns/op
 *									-> co.uk	-> ~26 ns/op
 * THE WINNER: switch case
 */

// Internal list to ignore specific TLDs.
// Use this slice to exclude the TLD.
var ignoreList = []string{}

func main() {

	dat, err := http.Get("https://publicsuffix.org/list/public_suffix_list.dat")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to get list: %s\n", err)
		os.Exit(1)
	}
	defer dat.Body.Close()

	suffix := make([]string, 0)

	scanner := bufio.NewScanner(dat.Body)

	for scanner.Scan() {

		line := scanner.Text()

		// Skip empty line
		if len(line) < 2 {
			continue
		}

		// Skip comments
		if line[:2] == "//" {
			continue
		}

		// Skip specific TLDs
		if slices.Contain(ignoreList, line) {
			continue
		}

		fields := strings.Split(line, ".")

		// Skip TLD only
		if len(fields) != 2 {
			continue
		}
		// Skip wildcard
		if fields[0] == "*" {
			continue
		}

		suffix = append(suffix, line)

	}

	file, err := os.OpenFile("../../restricted_sld.go", os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to open restricted_sld.go: %s\n", err)
		os.Exit(1)
	}

	file.WriteString("package domain\n")
	file.WriteString("\n")
	file.WriteString("// This file is autogenerated by ./tools/rSLDgen. Do not edit by hand, use this tool!\n")
	file.WriteString("\n")
	file.WriteString("// IsRestrictedSLD resturns whether d is a reserved second level domain (eg.: co.uk)\n")
	file.WriteString("// or used to host subdomains.\n")
	file.WriteString("func IsRestrictedSLD(tld string) bool {\n")
	file.WriteString("\n")
	file.WriteString("    switch tld {\n")

	for i := range suffix {

		file.WriteString(fmt.Sprintf("    case \"%s\":\n", suffix[i]))
		file.WriteString("        return true\n")
	}

	file.WriteString("    default:\n")
	file.WriteString("        return false\n")
	file.WriteString("    }\n")
	file.WriteString("}\n")

}
